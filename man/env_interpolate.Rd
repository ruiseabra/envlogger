% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read.R
\name{env_interpolate}
\alias{env_interpolate}
\title{Interpolate EnvLogger data}
\usage{
env_interpolate(
  dat,
  freq_mins = 60,
  margin = 5 * 60,
  stop_if_error = TRUE,
  dataset_has_pressure = FALSE
)
}
\arguments{
\item{dat}{a tibble with time (\code{t}) and temperature (\code{temp}), as the \verb{$data} column in the output from \code{\link[=read_env_all]{read_env_all()}}}

\item{freq_mins}{numeric, defaults to \code{60}; interpolation interval in minutes.}

\item{margin}{numeric, defaults to \code{300}; if t0 is less than \code{margin} seconds after the rounded hour, t0 for interpolation is set to the rounded hour; otherwise, t0 is set to the next rounded hour. The equivalent is done for t1.}

\item{stop_if_error}{logical, defaults to \code{TRUE}; when there isn't enough data to interpolate to the provided freq_mins, should the operation terminate with an error, or issue a warning and output an empty tibble?}

\item{dataset_has_pressure}{logical, defaults to \code{FALSE}; set to TRUE if \code{dat} includes pressure data}
}
\value{
The same tibble, but now with readings every freq_mins
}
\description{
Perform linear interpolation to tidy EnvLogger data so that there's one reading every hour (00 mins, 00 secs) or other specified interval; !ALWAYS! apply before binding data from different reports, as otherwise the interpolation will generate artificial data filling any gap that may be present.
}
\examples{
path <- env_example(no_logs = TRUE)[1]
dat  <- read_env_all(path)$data[[1]]
env_interpolate(dat)
}
\seealso{
\code{\link[=read_env_all]{read_env_all()}}
}
