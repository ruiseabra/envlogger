% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot_env}
\alias{plot_env}
\title{Plot data from one EnvLogger}
\usage{
plot_env(
  cctbon_data,
  discard_mic = NULL,
  dy = FALSE,
  by_micro = FALSE,
  by_shore = FALSE,
  by_day = TRUE,
  smooth = FALSE,
  stat = "avg",
  col_by = "id",
  ribbon = FALSE,
  ribbon_alpha = 0.3,
  facet_row = NULL,
  facet_col = NULL,
  roll_days = 0,
  xlim_common = FALSE,
  meters_corr = 0
)
}
\arguments{
\item{cctbon_data}{a tibble generated by \code{READ_ENV(..., just_rep = TRUE)}, with logger names structured according to the CCTBON scheme, or a character vector of paths to files that can be read by \code{\link[=READ_ENV]{READ_ENV()}} (or folders containing such files).}

\item{discard_mic}{string vector, defaults to \code{NULL}; use to discard specific microhabitats from the plot.}

\item{dy}{logical, defaults to \code{FALSE}; whether to print an interactive dygraph instead (some of the other parameters become irrelevant)}

\item{by_micro}{logical, defaults to \code{FALSE}; whether data should be grouped at the microhabitat level.}

\item{by_shore}{logical, defaults to \code{FALSE}; whether data should be grouped at the shore level (ignored if \code{by_micro = TRUE}).}

\item{by_day}{logical, defaults to \code{TRUE}; whether data should be grouped daily (applied before \code{roll_days}).}

\item{smooth}{logical, defaults to \code{FALSE}; whether to plot a loess smoothed curve instead.}

\item{stat}{character string, defaults to \code{avg}; the stat to be plotted if any of \code{by_micro}, \code{by_shore} or \code{by_day} is set to \code{TRUE}; one of \code{min}, \code{q10}, \code{q25}, \code{avg}, \code{q50}, \code{q75}, \code{q90}, \code{max}, or \code{sd}.}

\item{col_by}{character string, defaults to \code{id}; the color scale to be used; one of \code{id}, \code{sh}, \code{exp}, \code{lvl} or \code{mic} for each logger, exposure to solar radiation, height level in the shore and microhabitat, respectively.}

\item{ribbon}{logical, defaults to \code{FALSE}; whether to add a min-max ribbon.}

\item{ribbon_alpha}{numeric, defaults to \code{0.3}; a value from 0 to 1 indicating the transparency level of the ribbon (0 is fully transparent, 1 is fully solid).}

\item{facet_row}{character string, defaults to \code{NULL}; if set, the chosen variable is used to establish facetting rows; values allowed are \code{sh}, \code{exp}, \code{lvl} or \code{mic} (same meaning as in \code{col_by}).}

\item{facet_col}{same as \code{facet_row}, but to set facetting columns.}

\item{roll_days}{integer, defaults to \code{0}; number of days over which to group summarised data (rolling mean); if \code{0}, data is returned without temporal summarisation.}

\item{xlim_common}{logical, defaults to \code{FALSE}; whether to trim edges to only include data during common time ranges across all shores.}

\item{meters_corr}{numeric, defaults to \code{0}; a correction to be applied to the pressure data (if present in the dataset), in meters.}
}
\value{
A ggplot
}
\description{
Plot data from one EnvLogger
}
\examples{
# a single EnvLogger file
paths1 <- env_example("ptzzwmh", no_logs = TRUE)[1]
plot_env(paths1) # by default, data is aggregated at least by day
plot_env(paths1, by_day = FALSE) # raw data

# when "dy = FALSE", normal ggplot2 syntax can be used
plot_env(paths1, by_day = FALSE) +
  ggplot2::ggtitle("ggplot2 syntax example") +
  ggplot2::theme_classic() +
  ggplot2::scale_color_manual(guide = "none", values = "red")

# same plot, but using the interactive dygraphs package
plot_env(paths1, dy = TRUE)
plot_env(paths1, dy = TRUE, by_day = FALSE) # raw data

# similarly to ggplot2, dygraphs plots can also be customized
dygraphs::dyLegend(plot_env(paths1, dy = TRUE, by_day = FALSE), show = "follow")

# if any path points to a file with pressure data,
# only entries with pressure data are plotted
paths2 <- env_example("ptzzx", no_logs = TRUE)
basename(paths2) # only "ptzzxmc01b" will be plotted
plot_env(paths2)
plot_env(paths2, dy = TRUE)
plot_env(paths2, dy = TRUE, meters_corr = 4)

# plot data from multiple sites, microhabitats, etc
paths3 <- env_example(c("ptzzw", "nozzz"), dir = TRUE)
plot_env(paths3)

# data series can be colored by shore, microhabitat,
# exposure to solar radiation and shore height level
plot_env(paths3, col_by = "sh")

# facets can help differentiate groups of data series
plot_env(paths3, facet_row = "exp")

# data from loggers sharing certain microhabitat
# types can be aggregated
plot_env(paths3,
         by_micro = TRUE,
         col_by = "mic")

# facets and colors can be combined to further
# differentiate data series
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic")

# add ribbons to see the range of the data that has been aggregated
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic",
         ribbon = TRUE)

# by default, once aggregated, the solid line shows average
# temperature, but other metrics can also be quickly visualized
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic",
         ribbon = TRUE,
         stat = "q90")

# apply a rolling mean
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic",
         ribbon = TRUE,
         stat = "q90",
         roll = 7)

# plot a smoothed curve instead
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic",
         ribbon = TRUE,
         stat = "q90",
         roll = 7,
         smooth = TRUE)

# trim to a timespan when data was available for all data series
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic",
         ribbon = TRUE,
         stat = "q90",
         roll = 7,
         xlim_common = TRUE)

# use different colors
plot_env(paths3,
         by_micro = TRUE,
         col_by = "sh",
         facet_row = "mic",
         ribbon = TRUE,
         stat = "q90",
         roll = 7,
         xlim_common = TRUE) +
         ggplot2::scale_color_manual(values = c("black", "green")) +
         ggplot2::scale_fill_manual(values = c("black", "green"))
}
\seealso{
\code{\link[=read_env_all]{read_env_all()}}
}
